from pydantic import BaseModel, Field, field_validator, ValidationInfo
from typing import List, Optional, Dict, Any
from datetime import datetime, time

class ChargingOptimizationRequest(BaseModel):
    """Schema for charging optimization request."""
    vehicle_id: int = Field(..., description="ID of the vehicle to optimize charging for")
    station_id: int = Field(..., description="ID of the charging station")
    target_soc_percent: Optional[float] = Field(
        100.0,
        ge=0.0,
        le=100.0,
        description="Target state of charge in percent"
    )
    departure_time: datetime = Field(
        ...,
        description="Planned departure time for the vehicle"
    )
    electricity_tariffs: Optional[List[Dict[str, Any]]] = Field(
        None,
        description="List of electricity tariffs with time slots and rates"
    )
    max_charging_power_kw: Optional[float] = Field(
        None,
        gt=0.0,
        description="Maximum charging power in kilowatts"
    )

    @field_validator('electricity_tariffs')
    def validate_tariffs(cls, v, info: ValidationInfo):
        """Validate electricity tariffs format."""
        if v is not None:
            for tariff in v:
                if not all(key in tariff for key in ['start_time', 'end_time', 'rate']):
                    raise ValueError(
                        "Each tariff must contain 'start_time', 'end_time', and 'rate'"
                    )
                
                # Validate time format
                try:
                    start = datetime.strptime(tariff['start_time'], '%H:%M').time()
                    end = datetime.strptime(tariff['end_time'], '%H:%M').time()
                except ValueError:
                    raise ValueError("Time must be in 'HH:MM' format")
                
                # Validate rate
                if not isinstance(tariff['rate'], (int, float)) or tariff['rate'] <= 0:
                    raise ValueError("Rate must be a positive number")
                
                # Validate time range
                if start >= end:
                    raise ValueError("Start time must be before end time")
        return v

    @field_validator('departure_time')
    def validate_departure_time(cls, v, info: ValidationInfo):
        """Validate that departure time is in the future."""
        # Use UTC now to ensure consistent comparison
        now = datetime.utcnow()
        if v <= now:
            raise ValueError("Departure time must be in the future")
        return v

class ChargingScheduleSlot(BaseModel):
    """Schema for a charging schedule time slot."""
    start_time: datetime = Field(..., description="Start time of the charging slot")
    end_time: datetime = Field(..., description="End time of the charging slot")
    charging_power_kw: float = Field(
        ...,
        gt=0.0,
        description="Charging power in kilowatts"
    )
    estimated_soc_achieved_percent: float = Field(
        ...,
        ge=0.0,
        le=100.0,
        description="Estimated state of charge achieved at the end of this slot"
    )

    @field_validator('end_time')
    def validate_time_range(cls, v, info: ValidationInfo):
        """Validate that end time is after start time."""
        if info.data.get('start_time') and v <= info.data['start_time']:
            raise ValueError("End time must be after start time")
        return v

class ChargingOptimizationResponse(BaseModel):
    """Schema for charging optimization response."""
    vehicle_id: int = Field(..., description="ID of the vehicle")
    optimized_schedule: List[ChargingScheduleSlot] = Field(
        ...,
        description="List of optimized charging schedule slots"
    )
    total_estimated_cost: Optional[float] = Field(
        None,
        ge=0.0,
        description="Total estimated cost of charging"
    )
    warnings: Optional[List[str]] = Field(
        None,
        description="List of warnings or important notices about the schedule"
    )

    @field_validator('optimized_schedule')
    def validate_schedule_continuity(cls, v, info: ValidationInfo):
        """Validate that schedule slots are continuous and non-overlapping."""
        if len(v) > 1:
            for i in range(len(v) - 1):
                if v[i].end_time != v[i + 1].start_time:
                    raise ValueError(
                        "Schedule slots must be continuous without gaps or overlaps"
                    )
        return v

    model_config = {
        "json_schema_extra": {
            "example": {
                "vehicle_id": 1,
                "optimized_schedule": [
                    {
                        "start_time": "2024-03-20T22:00:00Z",
                        "end_time": "2024-03-21T02:00:00Z",
                        "charging_power_kw": 7.4,
                        "estimated_soc_achieved_percent": 80.0
                    },
                    {
                        "start_time": "2024-03-21T02:00:00Z",
                        "end_time": "2024-03-21T05:00:00Z",
                        "charging_power_kw": 11.0,
                        "estimated_soc_achieved_percent": 100.0
                    }
                ],
                "total_estimated_cost": 15.75,
                "warnings": [
                    "Charging at reduced power due to station limitations"
                ]
            }
        }
    }
}